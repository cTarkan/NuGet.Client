// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// This file is used by Code Analysis to maintain SuppressMessage 
// attributes that are applied to this project.
// Project-level suppressions either have no target or are given 
// a specific target and scoped to a namespace, type, member, etc.

using System.Diagnostics.CodeAnalysis;

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "VSTHRD110:Observe result of async calls", Justification = "https://github.com/NuGet/Home/issues/7674", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.FindPackageCommand.FindPackagesByPSSearchService")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "VSTHRD110:Observe result of async calls", Justification = "https://github.com/NuGet/Home/issues/7674", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.FindPackageCommand.FindPackageStartWithId(System.Boolean)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "VSTHRD110:Observe result of async calls", Justification = "https://github.com/NuGet/Home/issues/7674", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand.ProcessRecordCore")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "VSTHRD110:Observe result of async calls", Justification = "https://github.com/NuGet/Home/issues/7674", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.SyncPackageCommand.ProcessRecordCore")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "VSTHRD110:Observe result of async calls", Justification = "https://github.com/NuGet/Home/issues/7674", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand.ProcessRecordCore")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Usage", "VSTHRD110:Observe result of async calls", Justification = "https://github.com/NuGet/Home/issues/7674", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UninstallPackageCommand.ProcessRecordCore")]
[assembly: SuppressMessage("Build", "CA1051:Do not declare visible instance fields", Justification = "<Pending>", Scope = "member", Target = "~F:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand._packageCount")]
[assembly: SuppressMessage("Build", "CA1051:Do not declare visible instance fields", Justification = "<Pending>", Scope = "member", Target = "~F:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand._status")]
[assembly: SuppressMessage("Build", "CA1051:Do not declare visible instance fields", Justification = "<Pending>", Scope = "member", Target = "~F:NuGet.PackageManagement.PowerShellCmdlets.PackageActionBaseCommand._lockService")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.AddBindingRedirectCommand.ProcessRecordCore")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.GetPackageCommand.Preprocess")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.GetPackageCommand.WriteUpdatePackagesFromRemoteSourceAsync(NuGet.ProjectManagement.NuGetProject)~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.GetPackageCommand.WriteUpdatePackagesFromRemoteSourceAsyncInSolutionAsync~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.GetProjectCommand.Preprocess")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.GetProjectCommand.ProcessRecordCore")]
[assembly: SuppressMessage("Build", "CA2234:Modify 'InstallPackageCommand.CreatePackageIdentitiesFromPackagesConfig()' to call 'WebRequest.Create(Uri)' instead of 'WebRequest.Create(string)'.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand.CreatePackageIdentitiesFromPackagesConfig~System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity}")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand.CreatePackageIdentityFromNupkgPath~System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity}")]
[assembly: SuppressMessage("Build", "CA2234:Modify 'InstallPackageCommand.CreatePackageIdentityFromNupkgPath()' to call 'HttpClient.GetStreamAsync(Uri)' instead of 'HttpClient.GetStreamAsync(string)'.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand.CreatePackageIdentityFromNupkgPath~System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity}")]
[assembly: SuppressMessage("Build", "CA1031:Modify 'InstallPackageByIdAsync' to catch a more specific allowed exception type, or rethrow the exception.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand.InstallPackageByIdAsync~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA1305:'InstallPackageCommand.InstallPackageByIdAsync()' passes 'CultureInfo.CurrentUICulture' as the 'IFormatProvider' parameter to 'string.Format(IFormatProvider, string, object, object)'. This property returns a culture that is inappropriate for formatting methods.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand.InstallPackageByIdAsync~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand.InstallPackageByIdAsync~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA1031:Modify 'InstallPackagesAsync' to catch a more specific allowed exception type, or rethrow the exception.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand.InstallPackagesAsync(System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity})~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand.InstallPackagesAsync(System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity})~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand.ProcessRecordCore")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.CheckMissingPackagesAsync~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.CheckSolutionState")]
[assembly: SuppressMessage("Build", "CA1822:Member EnsureValidSource does not access instance data and can be marked as static (Shared in VisualBasic)", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.EnsureValidSource(NuGet.PackageManagement.PowerShellCmdlets.SourceValidationResult)")]
[assembly: SuppressMessage("Build", "CA1062:In externally visible method 'void NuGetPowerShellBaseCommand.EnsureValidSource(SourceValidationResult result)', validate parameter 'result' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.EnsureValidSource(NuGet.PackageManagement.PowerShellCmdlets.SourceValidationResult)")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.GetAllValidProjectNamesAsync~System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.GetDefaultProjectAsync~System.Threading.Tasks.Task{NuGet.VisualStudio.IVsProjectAdapter}")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.GetInstalledPackagesAsync(System.Collections.Generic.IEnumerable{NuGet.ProjectManagement.NuGetProject},System.String,System.Int32,System.Int32,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{NuGet.ProjectManagement.NuGetProject,System.Collections.Generic.IEnumerable{NuGet.Packaging.PackageReference}}}")]
[assembly: SuppressMessage("Build", "CA1062:In externally visible method 'Task<Dictionary<NuGetProject, IEnumerable<PackageReference>>> NuGetPowerShellBaseCommand.GetInstalledPackagesAsync(IEnumerable<NuGetProject> projects, string filter, int skip, int take, CancellationToken token)', validate parameter 'projects' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.GetInstalledPackagesAsync(System.Collections.Generic.IEnumerable{NuGet.ProjectManagement.NuGetProject},System.String,System.Int32,System.Int32,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{NuGet.ProjectManagement.NuGetProject,System.Collections.Generic.IEnumerable{NuGet.Packaging.PackageReference}}}")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.GetLatestPackageFromRemoteSourceAsync(NuGet.Packaging.Core.PackageIdentity,System.Boolean)~System.Threading.Tasks.Task{NuGet.Protocol.Core.Types.IPackageSearchMetadata}")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.GetNuGetProjectAsync(System.String)~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.GetPackageIdsFromRemoteSourceAsync(System.String,System.Boolean)~System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.GetPackagesFromRemoteSourceAsync(System.String,System.Boolean)~System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.IPackageSearchMetadata}}")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.GetPackageVersionsFromRemoteSourceAsync(System.String,System.String,System.Boolean)~System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{NuGet.Versioning.NuGetVersion}}")]
[assembly: SuppressMessage("Build", "CA1062:In externally visible method 'Task<IEnumerable<IVsProjectAdapter>> NuGetPowerShellBaseCommand.GetProjectsByNameAsync(string[] projectNames)', validate parameter 'projectNames' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.GetProjectsByNameAsync(System.String[])~System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{NuGet.VisualStudio.IVsProjectAdapter}}")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.GetProjectsByNameAsync(System.String[])~System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{NuGet.VisualStudio.IVsProjectAdapter}}")]
[assembly: SuppressMessage("Build", "CA1062:In externally visible method 'void NuGetPowerShellBaseCommand.Log(ILogMessage message)', validate parameter 'message' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.Log(NuGet.Common.ILogMessage)")]
[assembly: SuppressMessage("Build", "CA1822:Member SubscribeToProgressEvents does not access instance data and can be marked as static (Shared in VisualBasic)", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.SubscribeToProgressEvents")]
[assembly: SuppressMessage("Build", "CA1822:Member UnsubscribeEvents does not access instance data and can be marked as static (Shared in VisualBasic)", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.UnsubscribeEvents")]
[assembly: SuppressMessage("Build", "CA1822:Member UnsubscribeFromProgressEvents does not access instance data and can be marked as static (Shared in VisualBasic)", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.NuGetPowerShellBaseCommand.UnsubscribeFromProgressEvents")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.PackageActionBaseCommand.CheckPackageManagementFormat~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA1062:In externally visible method 'Task PackageActionBaseCommand.InstallPackageByIdAsync(NuGetProject project, string packageId, ResolutionContext resolutionContext, INuGetProjectContext projectContext, bool isPreview)', validate parameter 'resolutionContext' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.PackageActionBaseCommand.InstallPackageByIdAsync(NuGet.ProjectManagement.NuGetProject,System.String,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,System.Boolean)~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.PackageActionBaseCommand.InstallPackageByIdAsync(NuGet.ProjectManagement.NuGetProject,System.String,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,System.Boolean)~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2200:Re-throwing caught exception changes stack information.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.PackageActionBaseCommand.InstallPackageByIdAsync(NuGet.ProjectManagement.NuGetProject,System.String,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,System.Boolean)~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.PackageActionBaseCommand.InstallPackageByIdentityAsync(NuGet.ProjectManagement.NuGetProject,NuGet.Packaging.Core.PackageIdentity,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,System.Boolean)~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA1062:In externally visible method 'Task PackageActionBaseCommand.InstallPackageByIdentityAsync(NuGetProject project, PackageIdentity identity, ResolutionContext resolutionContext, INuGetProjectContext projectContext, bool isPreview)', validate parameter 'resolutionContext' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.PackageActionBaseCommand.InstallPackageByIdentityAsync(NuGet.ProjectManagement.NuGetProject,NuGet.Packaging.Core.PackageIdentity,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,System.Boolean)~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2200:Re-throwing caught exception changes stack information.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.PackageActionBaseCommand.InstallPackageByIdentityAsync(NuGet.ProjectManagement.NuGetProject,NuGet.Packaging.Core.PackageIdentity,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,System.Boolean)~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.PackageActionBaseCommand.Preprocess")]
[assembly: SuppressMessage("Build", "CA1305:'PackageActionBaseCommand.WarnIfParametersAreNotSupported()' passes 'CultureInfo.CurrentUICulture' as the 'IFormatProvider' parameter to 'string.Format(IFormatProvider, string, object, object)'. This property returns a culture that is inappropriate for formatting methods.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.PackageActionBaseCommand.WarnIfParametersAreNotSupported")]
[assembly: SuppressMessage("Build", "CA1062:In externally visible method 'IEnumerable<string> PowerShellCmdletsUtility.GetProjectTargetFrameworks(NuGetProject project)', validate parameter 'project' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.PowerShellCmdletsUtility.GetProjectTargetFrameworks(NuGet.ProjectManagement.NuGetProject)~System.Collections.Generic.IEnumerable{System.String}")]
[assembly: SuppressMessage("Build", "CA1801:Parameter SolutionManager of method GetPowerShellPackageView is never used. Remove the parameter or use it in the method body.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.PowerShellInstalledPackage.GetPowerShellPackageView(System.Collections.Generic.Dictionary{NuGet.ProjectManagement.NuGetProject,System.Collections.Generic.IEnumerable{NuGet.Packaging.PackageReference}},NuGet.PackageManagement.ISolutionManager,NuGet.Configuration.ISettings)~System.Collections.Generic.List{NuGet.PackageManagement.PowerShellCmdlets.PowerShellInstalledPackage}")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.PowerShellRemotePackage.GetPowerShellPackageView(System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.IPackageSearchMetadata},NuGet.PackageManagement.PowerShellCmdlets.VersionType)~System.Collections.Generic.List{NuGet.PackageManagement.PowerShellCmdlets.PowerShellRemotePackage}")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.PowerShellUpdatePackage.GetPowerShellPackageUpdateView(NuGet.Protocol.Core.Types.IPackageSearchMetadata,NuGet.Versioning.NuGetVersion,NuGet.PackageManagement.PowerShellCmdlets.VersionType,NuGet.ProjectManagement.NuGetProject)~NuGet.PackageManagement.PowerShellCmdlets.PowerShellUpdatePackage")]
[assembly: SuppressMessage("Build", "CA1062:In externally visible method 'int ProgressRecordCollection.GetKeyForItem(ProgressRecord item)', validate parameter 'item' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.ProgressRecordCollection.GetKeyForItem(System.Management.Automation.ProgressRecord)~System.Int32")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.SyncPackageCommand.GetPackageIdentity~System.Threading.Tasks.Task{NuGet.Packaging.Core.PackageIdentity}")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.SyncPackageCommand.Preprocess")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.SyncPackageCommand.ProcessRecordCore")]
[assembly: SuppressMessage("Build", "CA1031:Modify 'SyncPackages' to catch a more specific allowed exception type, or rethrow the exception.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.SyncPackageCommand.SyncPackages(System.Collections.Generic.IEnumerable{NuGet.ProjectManagement.NuGetProject},NuGet.Packaging.Core.PackageIdentity)~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.SyncPackageCommand.SyncPackages(System.Collections.Generic.IEnumerable{NuGet.ProjectManagement.NuGetProject},NuGet.Packaging.Core.PackageIdentity)~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UninstallPackageCommand.Preprocess")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UninstallPackageCommand.ProcessRecordCore")]
[assembly: SuppressMessage("Build", "CA1031:Modify 'UninstallPackageAsync' to catch a more specific allowed exception type, or rethrow the exception.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UninstallPackageCommand.UninstallPackageAsync~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UninstallPackageCommand.UninstallPackageAsync~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UninstallPackageCommand.UninstallPackageByIdAsync(NuGet.ProjectManagement.NuGetProject,System.String,NuGet.PackageManagement.UninstallationContext,NuGet.ProjectManagement.INuGetProjectContext,System.Boolean)~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand.ExecuteActions(System.Collections.Generic.IEnumerable{NuGet.PackageManagement.NuGetProjectAction},NuGet.Protocol.Core.Types.SourceCacheContext)~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand.IsPackageInstalledAsync(System.String)~System.Threading.Tasks.Task{System.Boolean}")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand.Preprocess")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand.PreviewAndExecuteUpdateActionsForSinglePackage~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand.ProcessRecordCore")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand.UpdateOrReinstallAllPackagesAsync~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA1031:Modify 'UpdateOrReinstallAllPackagesAsync' to catch a more specific allowed exception type, or rethrow the exception.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand.UpdateOrReinstallAllPackagesAsync~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand.UpdateOrReinstallSinglePackageAsync~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA1031:Modify 'UpdateOrReinstallSinglePackageAsync' to catch a more specific allowed exception type, or rethrow the exception.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand.UpdateOrReinstallSinglePackageAsync~System.Threading.Tasks.Task")]
[assembly: SuppressMessage("Build", "CA1305:'UpdatePackageCommand.WarnIfParametersAreNotSupported()' passes 'CultureInfo.CurrentUICulture' as the 'IFormatProvider' parameter to 'string.Format(IFormatProvider, string, object, object)'. This property returns a culture that is inappropriate for formatting methods.", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.UpdatePackageCommand.WarnIfParametersAreNotSupported")]
[assembly: SuppressMessage("Build", "CA1507:Use nameof in place of string literal 'request'", Justification = "<Pending>", Scope = "member", Target = "~M:NuGet.PackageManagement.PowerShellCmdlets.WebRequestEventArgs.#ctor(System.Net.WebRequest)")]
[assembly: SuppressMessage("Build", "CA1056:Change the type of property PowerShellPackage.LicenseUrl from string to System.Uri.", Justification = "<Pending>", Scope = "member", Target = "~P:NuGet.PackageManagement.PowerShellCmdlets.PowerShellPackage.LicenseUrl")]
[assembly: SuppressMessage("Build", "CA1806:get_Version calls TryParse but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.", Justification = "<Pending>", Scope = "member", Target = "~P:NuGet.PackageManagement.PowerShellCmdlets.PowerShellPackage.Version")]
[assembly: SuppressMessage("Build", "CA2007:Consider calling ConfigureAwait on the awaited task", Justification = "<Pending>", Scope = "member", Target = "~P:NuGet.PackageManagement.PowerShellCmdlets.PowerShellPackage.Versions")]
[assembly: SuppressMessage("Build", "CA1032:Add the following constructor to PackageSourceException: public PackageSourceException(string message, Exception innerException).", Justification = "<Pending>", Scope = "type", Target = "~T:NuGet.PackageManagement.PowerShellCmdlets.PackageSourceException")]
[assembly: SuppressMessage("Build", "CA2237:Add [Serializable] to PackageSourceException as this type implements ISerializable", Justification = "<Pending>", Scope = "type", Target = "~T:NuGet.PackageManagement.PowerShellCmdlets.PackageSourceException")]
